
# Description: config file for default parameters of scenenet_ts40k experiment
# Author: Diogo Mateus
program: main.py
method: random
metric:
  goal: maximize
  name: val_MulticlassJaccardIndex
project: 'TS40K'
variables:
  - &model 'unet'
command:
  - python3
  - ${program}
  - --wandb_sweep 
  - --model
  - *model
parameters:
  output_dir: 
    value: '${experiment_path}/outputs'
  # ------------------ #
  # dataset config
  # ------------------ #
  dataset:
    value: 'ts40k'
  preprocessed:
    value: True
    # description: 'If True, uses the preprocessed the dataset'
  load_into_memory:
    value: True
  data_path:
    value: ''
  num_classes:
    value: 6
  num_data_channels:
    value: 3
    # description: 'Number of channels in the dataset'
  voxel_grid_size:
  value: (64, 64, 64)
  voxel_size:
    value: None
  batch_size:
    value: 8
  ignore_index:
    value: 0 # -1 to not ignore any class (including noise); 0 to ignore noise
  num_workers: 
    value: 0
  val_split:
    value: 0.1
  test_split:
    value: 0.3
  fps_points:
    value: 10000
  min_points:
    value: None
    # description: 'Number of points to sample from the point cloud with farthest point sampling'
  # ------------------ #
  # model config
  # ------------------ #
  model_name: 
    values: ['UNet3D', 'ResidualUNet3D', 'ResidualUNetSE3D']
  in_channels: 
    value: 1
  final_sigmoid: 
    value: False
  f_maps:
    values: [32, 64, 128, 256]
    # description: 'Number of feature maps in the first layer'
  layer_order:
    values: ['cbrd', 'crg', 'cl', 'cr']
    # description: 'Order of the layers in the convolutional block'
  num_groups:
    values: [1, 8, 16]
    # description: 'Number of groups in the group normalization'
  num_levels:
    values: [3, 4, 5]
    # description: 'Number of levels in the U-Net'
  is_segmentation:
    value: True
    # description: 'If True, the model is a segmentation model'
  conv_padding:
    value: 1
    # description: 'Padding in the convolutional layers'
  conv_upscale:
    value: 2
    # description: 'Upscale factor in the convolutional layers'
  upsample:
    values: ['default', 'nearest', 'linear', 'trilinear', 'deconv']
    # description: 'Upsampling method'
  dropout_prob:
    values: [0.1, 0.2, 0.3]
    # description: 'Dropout probability'
  is_geneo:
    value: True
    # description: 'If True, the model uses GENEO layers instead of convolutional layers'
  # ------------------ #
  # training config
  # ------------------ #
  optimizer:
    value: 'adam' #'adam' 
  learning_rate:
    min: 0.0001
    max: 0.001
  max_epochs:
    values: [10, 50, 100] # -1 for infinite
  accelerator:
    value: 'gpu' # 'ddp' or 'dp'
  devices:
    value: -1 # -1 for all available gpus
  num_nodes:
    value: 1
  strategy:
    value: 'auto' # 'ddp'
  early_stop_metric:
    value: 'val_MulticlassJaccardIndex'
  # ------------------ #
  # criterion addons config
  # ------------------ #
  criterion:
    value: 'cross_entropy' # this is not in use
    # description: 'Loss function' # this is not in use since pointnet models have their own loss function
  # ------------------ #
  # Lit Trainer config
  # ------------------ #
  fast_dev_run:
    value: True
  precision: # 16 or 32 FPU precision
    value: 16
    # description: 'FPU precision'
  auto_lr_find:
    value: False
  auto_scale_batch_size:
    value: False
  profiler:
    value: False
    # description: 'PyTorch Lightning profiler'
  accumulate_grad_batches:
    value: 1
    # description: 'Accumulate gradients on k batches before performing a backward pass'
  save_onnx:
    value: False
    # description: 'Save model in onnx format'
  # ------------------ #
  # Checkpoint config
  # ------------------ #
  resume_from_checkpoint:
    value: False
  checkpoint_dir:
    value: '${experiment_path}/checkpoints'
  resume_checkpoint_name:
    value: MulticlassJaccardIndex # 'FbetaScore', 'train_loss', last, 'best', 'F1Score'
  checkpoint_every_n_epochs: # This parameter and the next one are mutually exclusive
    value: 0 # every n epochs
  checkpoint_every_n_steps:
    value: 1 # every n steps
    
